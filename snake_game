extern crate piston;
extern crate graphics;
extern crate glutin_window;
extern crate opengl_graphics;


use piston::window::WindowSettings;
use piston::event_loop::*;
use piston::input::*;
use glutin_window::GlutinWindow as Window;
use opengl_graphics::{ GlGraphics, OpenGL };
use std::thread::{sleep, current};
use std::env::current_dir;
use std::collections::{linked_list, LinkedList};
use std::iter::FromIterator;

#[derive(Clone, PartialEq)]
enum Direction {
    r,l,u,d //right, left, up, down
}
struct App {
    gl: GlGraphics,
    snake: Snake,
    food: Food,
    food_take: bool,
}

impl App {
    fn render(&mut self, arg: &RenderArgs){
        use graphics;
        let BACKGROUND:[f32;4] = [0.0,0.0,0.0,1.0]; //RGB and opacity
        self.gl.draw(arg.viewport(), |_c, gl|{graphics::clear(BACKGROUND,gl);} );
        self.snake.update(self.food_take);
        self.snake.render(&mut self.gl, arg);
        self.food.render(&mut self.gl, arg);

    }
    fn update(&mut self) -> bool{
        use rand::Rng;
        use rand::thread_rng;
        if self.snake.update(self.food_take)
        {
            let head = self.snake.body.front().unwrap();
            if self.food_take{
                self.food_take=false;
            }
            if (head.0 == self.food.x) || (head.1 == self.food.y){
                self.food_take = true;

                let mut r = thread_rng();
                loop {
                    let new_x = r.gen_range(0, 30);
                    let new_y = r.gen_range(0, 30);
                    if !self.snake.colision(new_x, new_y) {
                        self.food = Food { x: new_x, y: new_y };
                        break;
                    }
                }
            }
            return true;
        }
        else {
            return false;
        }
    }
    fn input(&mut self, btn: &Button){
        let current_direction = self.snake.direction.clone();
        self.snake.direction = match btn {
            &Button::Keyboard(Key::Left) if current_direction != Direction::r => Direction::l,
            &Button::Keyboard(Key::Right) if current_direction != Direction::l => Direction::r,
            &Button::Keyboard(Key::Up) if current_direction != Direction::d => Direction::u,
            &Button::Keyboard(Key::Down) if current_direction != Direction::u => Direction::d,
            _ => current_direction
        };
    }

}

#[derive(Clone)]
pub struct Snake_Piece(u32, u32);

struct Snake{
    body: LinkedList<Snake_Piece>,
    direction:Direction,
}
impl Snake{
    fn render(&self, gl: &mut GlGraphics, args: &RenderArgs){
        let SNAKE_COLOR:[f32;4]=[1.0,1.0,1.0,1.0];
        let squares: Vec<graphics::types::Rectangle> = self.body
            .iter()
            .map(|p| Snake_Piece(p.0 * 20, p.1 * 20))
            .map(|p| graphics::rectangle::square(p.0 as f64, p.1 as f64, 20 as f64))
            .collect();
        gl.draw(args.viewport(), |_c, gl|{let transform = _c.transform;squares.into_iter().for_each(|square| graphics::rectangle(SNAKE_COLOR,square,transform,gl));} );
    }
    fn update(&mut self, take_food: bool) -> bool{
        let mut head = (*self.body.front().expect("NOP")).clone();
        if head.0<=0 { //Gestion des bords
            return false;
        }
        if head.1<=0 {
            return false;
        }
        if head.0>=30 {
            return false;
        }
        if head.1>=30 {
            return false;
        } //Fin de gestion des bords
        match self.direction{
            Direction::l => head.0-=1,
            Direction::r => head.0+=1,
            Direction::u=>head.1-=1,
            Direction::d=>head.1+=1,
        }
        if self.colision(head.0, head.1) {
            return false;
        }
        self.body.push_front(head); //Update the new head coor
        if !take_food {
            self.body.pop_back().unwrap(); //Remove the last block to don't make a infinite snake
        }

        return true;
    }
    fn colision(&self, x: u32, y: u32) -> bool {
        self.body.iter().any(|p| x == p.0 && y == p.1)
    }
}
pub struct Food {
    x: u32,
    y: u32,
}

impl Food {

    fn render(&mut self, gl: &mut GlGraphics, args: &RenderArgs) {
        use graphics;

        const BLACK: [f32; 4] = [1.0, 0.0, 0.0, 1.0];

        let x = self.x * 20;
        let y = self.y * 20;

        let square = graphics::rectangle::square(x as f64, y as f64, 20 as f64);

        gl.draw(args.viewport(), |c, gl| {
            let transform = c.transform;

            graphics::rectangle(BLACK, square, transform, gl)
        });
    }
}
fn main(){
    use std::{thread, time};
    use std::io;
    let mut input=String::new();
    let mut number=0;
    let tmp = time::Duration::from_millis(20);

    let opengl = OpenGL::V3_2;

    let mut window: Window = WindowSettings::new("Snake",[30*20, 30*20]).graphics_api(opengl).exit_on_esc(true).build().unwrap();
    let mut app = App {gl: GlGraphics::new(opengl), snake : Snake {body: LinkedList::from_iter((vec![Snake_Piece(15, 15)]).into_iter()), direction:Direction::r}, food: Food {x:5,y:6}, food_take : false};
    let mut events = Events::new(EventSettings::new()).ups(8);
    while let Some(e) = events.next(&mut window) {
        if let Some(r) = e.render_args() {
            app.render(&r);
        }
        if let Some(u) = e.update_args(){
            if !app.update(){
                break;
            }
        }
        if let Some(k) = e.button_args(){
            if k.state == ButtonState::Press{
                app.input(&k.button);
            }
        }
        thread::sleep(tmp);
    }
    println!("END");
}
